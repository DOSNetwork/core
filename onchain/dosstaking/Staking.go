// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package staking

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// StakingABI is the input ABI used to generate the binding from.
const StakingABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dostoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dbtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nodeRunner\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"selfStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedDB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardCut\",\"type\":\"uint256\"}],\"name\":\"NewNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nodeRunner\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropburnAmount\",\"type\":\"uint256\"}],\"name\":\"Unbond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCirculatingSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCirculatingSupply\",\"type\":\"uint256\"}],\"name\":\"UpdateCirculatingSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuota\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuota\",\"type\":\"uint256\"}],\"name\":\"UpdateDropBurnMaxQuota\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinStakePerNode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinStakePerNode\",\"type\":\"uint256\"}],\"name\":\"UpdateMinStakePerNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"UpdateStakingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"UpdateUnbondDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nodeRunner\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dbAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DBDECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DBTOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOSDECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOSTOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LISTHEAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONEYEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accumulatedRewardIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridgeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"delegatorClaimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"delegatorUnbond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"delegatorWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"delegatorWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"delegatedNode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delegatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewardIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dropburnMaxQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"getDelegatorRewardTokensRT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNodeAddrs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"getNodeRewardTokensRT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"getNodeUptime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initBlkN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dostoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dbtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridgeAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"isValidStakingNode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRateUpdatedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minStakePerNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dropburnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardCut\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"newNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodeAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"nodeClaimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeRunners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"nodeStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"nodeStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dropburnAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"nodeUnbond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"nodeUnregister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"nodeWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"}],\"name\":\"nodeWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardCut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedDB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOtherDelegatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewardIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWithdrawToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingWithdrawDB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStartTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"running\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSupply\",\"type\":\"uint256\"}],\"name\":\"setCirculatingSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quota\",\"type\":\"uint256\"}],\"name\":\"setDropBurnMaxQuota\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"setMinStakePerNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setUnbondDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRewardsVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unbondDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDropburnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newCut\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newDesc\",\"type\":\"string\"}],\"name\":\"updateNodeStaking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// StakingBin is the compiled bytecode used for deploying new contracts.
const StakingBin = ``

// DeployStaking deploys a new Ethereum contract, binding an instance of Staking to it.
func DeployStaking(auth *bind.TransactOpts, backend bind.ContractBackend, _dostoken common.Address, _dbtoken common.Address, _vault common.Address, _bridgeAddr common.Address) (common.Address, *types.Transaction, *Staking, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(StakingBin), backend, _dostoken, _dbtoken, _vault, _bridgeAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// DBDECIMAL is a free data retrieval call binding the contract method 0x91bf6960.
//
// Solidity: function DBDECIMAL() constant returns(uint256)
func (_Staking *StakingCaller) DBDECIMAL(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "DBDECIMAL")
	return *ret0, err
}

// DBDECIMAL is a free data retrieval call binding the contract method 0x91bf6960.
//
// Solidity: function DBDECIMAL() constant returns(uint256)
func (_Staking *StakingSession) DBDECIMAL() (*big.Int, error) {
	return _Staking.Contract.DBDECIMAL(&_Staking.CallOpts)
}

// DBDECIMAL is a free data retrieval call binding the contract method 0x91bf6960.
//
// Solidity: function DBDECIMAL() constant returns(uint256)
func (_Staking *StakingCallerSession) DBDECIMAL() (*big.Int, error) {
	return _Staking.Contract.DBDECIMAL(&_Staking.CallOpts)
}

// DBTOKEN is a free data retrieval call binding the contract method 0xd2a02541.
//
// Solidity: function DBTOKEN() constant returns(address)
func (_Staking *StakingCaller) DBTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "DBTOKEN")
	return *ret0, err
}

// DBTOKEN is a free data retrieval call binding the contract method 0xd2a02541.
//
// Solidity: function DBTOKEN() constant returns(address)
func (_Staking *StakingSession) DBTOKEN() (common.Address, error) {
	return _Staking.Contract.DBTOKEN(&_Staking.CallOpts)
}

// DBTOKEN is a free data retrieval call binding the contract method 0xd2a02541.
//
// Solidity: function DBTOKEN() constant returns(address)
func (_Staking *StakingCallerSession) DBTOKEN() (common.Address, error) {
	return _Staking.Contract.DBTOKEN(&_Staking.CallOpts)
}

// DOSDECIMAL is a free data retrieval call binding the contract method 0xc48f4d47.
//
// Solidity: function DOSDECIMAL() constant returns(uint256)
func (_Staking *StakingCaller) DOSDECIMAL(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "DOSDECIMAL")
	return *ret0, err
}

// DOSDECIMAL is a free data retrieval call binding the contract method 0xc48f4d47.
//
// Solidity: function DOSDECIMAL() constant returns(uint256)
func (_Staking *StakingSession) DOSDECIMAL() (*big.Int, error) {
	return _Staking.Contract.DOSDECIMAL(&_Staking.CallOpts)
}

// DOSDECIMAL is a free data retrieval call binding the contract method 0xc48f4d47.
//
// Solidity: function DOSDECIMAL() constant returns(uint256)
func (_Staking *StakingCallerSession) DOSDECIMAL() (*big.Int, error) {
	return _Staking.Contract.DOSDECIMAL(&_Staking.CallOpts)
}

// DOSTOKEN is a free data retrieval call binding the contract method 0x0fd1d0ea.
//
// Solidity: function DOSTOKEN() constant returns(address)
func (_Staking *StakingCaller) DOSTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "DOSTOKEN")
	return *ret0, err
}

// DOSTOKEN is a free data retrieval call binding the contract method 0x0fd1d0ea.
//
// Solidity: function DOSTOKEN() constant returns(address)
func (_Staking *StakingSession) DOSTOKEN() (common.Address, error) {
	return _Staking.Contract.DOSTOKEN(&_Staking.CallOpts)
}

// DOSTOKEN is a free data retrieval call binding the contract method 0x0fd1d0ea.
//
// Solidity: function DOSTOKEN() constant returns(address)
func (_Staking *StakingCallerSession) DOSTOKEN() (common.Address, error) {
	return _Staking.Contract.DOSTOKEN(&_Staking.CallOpts)
}

// LISTHEAD is a free data retrieval call binding the contract method 0xf2f97c21.
//
// Solidity: function LISTHEAD() constant returns(uint256)
func (_Staking *StakingCaller) LISTHEAD(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "LISTHEAD")
	return *ret0, err
}

// LISTHEAD is a free data retrieval call binding the contract method 0xf2f97c21.
//
// Solidity: function LISTHEAD() constant returns(uint256)
func (_Staking *StakingSession) LISTHEAD() (*big.Int, error) {
	return _Staking.Contract.LISTHEAD(&_Staking.CallOpts)
}

// LISTHEAD is a free data retrieval call binding the contract method 0xf2f97c21.
//
// Solidity: function LISTHEAD() constant returns(uint256)
func (_Staking *StakingCallerSession) LISTHEAD() (*big.Int, error) {
	return _Staking.Contract.LISTHEAD(&_Staking.CallOpts)
}

// ONEYEAR is a free data retrieval call binding the contract method 0x195cb3ab.
//
// Solidity: function ONEYEAR() constant returns(uint256)
func (_Staking *StakingCaller) ONEYEAR(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "ONEYEAR")
	return *ret0, err
}

// ONEYEAR is a free data retrieval call binding the contract method 0x195cb3ab.
//
// Solidity: function ONEYEAR() constant returns(uint256)
func (_Staking *StakingSession) ONEYEAR() (*big.Int, error) {
	return _Staking.Contract.ONEYEAR(&_Staking.CallOpts)
}

// ONEYEAR is a free data retrieval call binding the contract method 0x195cb3ab.
//
// Solidity: function ONEYEAR() constant returns(uint256)
func (_Staking *StakingCallerSession) ONEYEAR() (*big.Int, error) {
	return _Staking.Contract.ONEYEAR(&_Staking.CallOpts)
}

// AccumulatedRewardIndex is a free data retrieval call binding the contract method 0x37308854.
//
// Solidity: function accumulatedRewardIndex() constant returns(uint256)
func (_Staking *StakingCaller) AccumulatedRewardIndex(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "accumulatedRewardIndex")
	return *ret0, err
}

// AccumulatedRewardIndex is a free data retrieval call binding the contract method 0x37308854.
//
// Solidity: function accumulatedRewardIndex() constant returns(uint256)
func (_Staking *StakingSession) AccumulatedRewardIndex() (*big.Int, error) {
	return _Staking.Contract.AccumulatedRewardIndex(&_Staking.CallOpts)
}

// AccumulatedRewardIndex is a free data retrieval call binding the contract method 0x37308854.
//
// Solidity: function accumulatedRewardIndex() constant returns(uint256)
func (_Staking *StakingCallerSession) AccumulatedRewardIndex() (*big.Int, error) {
	return _Staking.Contract.AccumulatedRewardIndex(&_Staking.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Staking *StakingCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Staking *StakingSession) Admin() (common.Address, error) {
	return _Staking.Contract.Admin(&_Staking.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Staking *StakingCallerSession) Admin() (common.Address, error) {
	return _Staking.Contract.Admin(&_Staking.CallOpts)
}

// BridgeAddr is a free data retrieval call binding the contract method 0x91874ef7.
//
// Solidity: function bridgeAddr() constant returns(address)
func (_Staking *StakingCaller) BridgeAddr(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "bridgeAddr")
	return *ret0, err
}

// BridgeAddr is a free data retrieval call binding the contract method 0x91874ef7.
//
// Solidity: function bridgeAddr() constant returns(address)
func (_Staking *StakingSession) BridgeAddr() (common.Address, error) {
	return _Staking.Contract.BridgeAddr(&_Staking.CallOpts)
}

// BridgeAddr is a free data retrieval call binding the contract method 0x91874ef7.
//
// Solidity: function bridgeAddr() constant returns(address)
func (_Staking *StakingCallerSession) BridgeAddr() (common.Address, error) {
	return _Staking.Contract.BridgeAddr(&_Staking.CallOpts)
}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() constant returns(uint256)
func (_Staking *StakingCaller) CirculatingSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "circulatingSupply")
	return *ret0, err
}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() constant returns(uint256)
func (_Staking *StakingSession) CirculatingSupply() (*big.Int, error) {
	return _Staking.Contract.CirculatingSupply(&_Staking.CallOpts)
}

// CirculatingSupply is a free data retrieval call binding the contract method 0x9358928b.
//
// Solidity: function circulatingSupply() constant returns(uint256)
func (_Staking *StakingCallerSession) CirculatingSupply() (*big.Int, error) {
	return _Staking.Contract.CirculatingSupply(&_Staking.CallOpts)
}

// DelegatorWithdrawable is a free data retrieval call binding the contract method 0x0bac06cb.
//
// Solidity: function delegatorWithdrawable(_owner address, _nodeAddr address) constant returns(uint256)
func (_Staking *StakingCaller) DelegatorWithdrawable(opts *bind.CallOpts, _owner common.Address, _nodeAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "delegatorWithdrawable", _owner, _nodeAddr)
	return *ret0, err
}

// DelegatorWithdrawable is a free data retrieval call binding the contract method 0x0bac06cb.
//
// Solidity: function delegatorWithdrawable(_owner address, _nodeAddr address) constant returns(uint256)
func (_Staking *StakingSession) DelegatorWithdrawable(_owner common.Address, _nodeAddr common.Address) (*big.Int, error) {
	return _Staking.Contract.DelegatorWithdrawable(&_Staking.CallOpts, _owner, _nodeAddr)
}

// DelegatorWithdrawable is a free data retrieval call binding the contract method 0x0bac06cb.
//
// Solidity: function delegatorWithdrawable(_owner address, _nodeAddr address) constant returns(uint256)
func (_Staking *StakingCallerSession) DelegatorWithdrawable(_owner common.Address, _nodeAddr common.Address) (*big.Int, error) {
	return _Staking.Contract.DelegatorWithdrawable(&_Staking.CallOpts, _owner, _nodeAddr)
}

// Delegators is a free data retrieval call binding the contract method 0xa2526bd3.
//
// Solidity: function delegators( address,  address) constant returns(delegatedNode address, delegatedAmount uint256, accumulatedRewards uint256, accumulatedRewardIndex uint256, pendingWithdraw uint256)
func (_Staking *StakingCaller) Delegators(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (struct {
	DelegatedNode          common.Address
	DelegatedAmount        *big.Int
	AccumulatedRewards     *big.Int
	AccumulatedRewardIndex *big.Int
	PendingWithdraw        *big.Int
}, error) {
	ret := new(struct {
		DelegatedNode          common.Address
		DelegatedAmount        *big.Int
		AccumulatedRewards     *big.Int
		AccumulatedRewardIndex *big.Int
		PendingWithdraw        *big.Int
	})
	out := ret
	err := _Staking.contract.Call(opts, out, "delegators", arg0, arg1)
	return *ret, err
}

// Delegators is a free data retrieval call binding the contract method 0xa2526bd3.
//
// Solidity: function delegators( address,  address) constant returns(delegatedNode address, delegatedAmount uint256, accumulatedRewards uint256, accumulatedRewardIndex uint256, pendingWithdraw uint256)
func (_Staking *StakingSession) Delegators(arg0 common.Address, arg1 common.Address) (struct {
	DelegatedNode          common.Address
	DelegatedAmount        *big.Int
	AccumulatedRewards     *big.Int
	AccumulatedRewardIndex *big.Int
	PendingWithdraw        *big.Int
}, error) {
	return _Staking.Contract.Delegators(&_Staking.CallOpts, arg0, arg1)
}

// Delegators is a free data retrieval call binding the contract method 0xa2526bd3.
//
// Solidity: function delegators( address,  address) constant returns(delegatedNode address, delegatedAmount uint256, accumulatedRewards uint256, accumulatedRewardIndex uint256, pendingWithdraw uint256)
func (_Staking *StakingCallerSession) Delegators(arg0 common.Address, arg1 common.Address) (struct {
	DelegatedNode          common.Address
	DelegatedAmount        *big.Int
	AccumulatedRewards     *big.Int
	AccumulatedRewardIndex *big.Int
	PendingWithdraw        *big.Int
}, error) {
	return _Staking.Contract.Delegators(&_Staking.CallOpts, arg0, arg1)
}

// DropburnMaxQuota is a free data retrieval call binding the contract method 0xe8c3470c.
//
// Solidity: function dropburnMaxQuota() constant returns(uint256)
func (_Staking *StakingCaller) DropburnMaxQuota(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "dropburnMaxQuota")
	return *ret0, err
}

// DropburnMaxQuota is a free data retrieval call binding the contract method 0xe8c3470c.
//
// Solidity: function dropburnMaxQuota() constant returns(uint256)
func (_Staking *StakingSession) DropburnMaxQuota() (*big.Int, error) {
	return _Staking.Contract.DropburnMaxQuota(&_Staking.CallOpts)
}

// DropburnMaxQuota is a free data retrieval call binding the contract method 0xe8c3470c.
//
// Solidity: function dropburnMaxQuota() constant returns(uint256)
func (_Staking *StakingCallerSession) DropburnMaxQuota() (*big.Int, error) {
	return _Staking.Contract.DropburnMaxQuota(&_Staking.CallOpts)
}

// GetCurrentAPR is a free data retrieval call binding the contract method 0x21ae05c8.
//
// Solidity: function getCurrentAPR() constant returns(uint256)
func (_Staking *StakingCaller) GetCurrentAPR(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "getCurrentAPR")
	return *ret0, err
}

// GetCurrentAPR is a free data retrieval call binding the contract method 0x21ae05c8.
//
// Solidity: function getCurrentAPR() constant returns(uint256)
func (_Staking *StakingSession) GetCurrentAPR() (*big.Int, error) {
	return _Staking.Contract.GetCurrentAPR(&_Staking.CallOpts)
}

// GetCurrentAPR is a free data retrieval call binding the contract method 0x21ae05c8.
//
// Solidity: function getCurrentAPR() constant returns(uint256)
func (_Staking *StakingCallerSession) GetCurrentAPR() (*big.Int, error) {
	return _Staking.Contract.GetCurrentAPR(&_Staking.CallOpts)
}

// GetDelegatorRewardTokensRT is a free data retrieval call binding the contract method 0xfb7f2488.
//
// Solidity: function getDelegatorRewardTokensRT(_delegator address, _nodeAddr address) constant returns(uint256)
func (_Staking *StakingCaller) GetDelegatorRewardTokensRT(opts *bind.CallOpts, _delegator common.Address, _nodeAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "getDelegatorRewardTokensRT", _delegator, _nodeAddr)
	return *ret0, err
}

// GetDelegatorRewardTokensRT is a free data retrieval call binding the contract method 0xfb7f2488.
//
// Solidity: function getDelegatorRewardTokensRT(_delegator address, _nodeAddr address) constant returns(uint256)
func (_Staking *StakingSession) GetDelegatorRewardTokensRT(_delegator common.Address, _nodeAddr common.Address) (*big.Int, error) {
	return _Staking.Contract.GetDelegatorRewardTokensRT(&_Staking.CallOpts, _delegator, _nodeAddr)
}

// GetDelegatorRewardTokensRT is a free data retrieval call binding the contract method 0xfb7f2488.
//
// Solidity: function getDelegatorRewardTokensRT(_delegator address, _nodeAddr address) constant returns(uint256)
func (_Staking *StakingCallerSession) GetDelegatorRewardTokensRT(_delegator common.Address, _nodeAddr common.Address) (*big.Int, error) {
	return _Staking.Contract.GetDelegatorRewardTokensRT(&_Staking.CallOpts, _delegator, _nodeAddr)
}

// GetNodeAddrs is a free data retrieval call binding the contract method 0x1017bf56.
//
// Solidity: function getNodeAddrs() constant returns(address[])
func (_Staking *StakingCaller) GetNodeAddrs(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "getNodeAddrs")
	return *ret0, err
}

// GetNodeAddrs is a free data retrieval call binding the contract method 0x1017bf56.
//
// Solidity: function getNodeAddrs() constant returns(address[])
func (_Staking *StakingSession) GetNodeAddrs() ([]common.Address, error) {
	return _Staking.Contract.GetNodeAddrs(&_Staking.CallOpts)
}

// GetNodeAddrs is a free data retrieval call binding the contract method 0x1017bf56.
//
// Solidity: function getNodeAddrs() constant returns(address[])
func (_Staking *StakingCallerSession) GetNodeAddrs() ([]common.Address, error) {
	return _Staking.Contract.GetNodeAddrs(&_Staking.CallOpts)
}

// GetNodeRewardTokensRT is a free data retrieval call binding the contract method 0x4d0b5ea9.
//
// Solidity: function getNodeRewardTokensRT(_nodeAddr address) constant returns(uint256)
func (_Staking *StakingCaller) GetNodeRewardTokensRT(opts *bind.CallOpts, _nodeAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "getNodeRewardTokensRT", _nodeAddr)
	return *ret0, err
}

// GetNodeRewardTokensRT is a free data retrieval call binding the contract method 0x4d0b5ea9.
//
// Solidity: function getNodeRewardTokensRT(_nodeAddr address) constant returns(uint256)
func (_Staking *StakingSession) GetNodeRewardTokensRT(_nodeAddr common.Address) (*big.Int, error) {
	return _Staking.Contract.GetNodeRewardTokensRT(&_Staking.CallOpts, _nodeAddr)
}

// GetNodeRewardTokensRT is a free data retrieval call binding the contract method 0x4d0b5ea9.
//
// Solidity: function getNodeRewardTokensRT(_nodeAddr address) constant returns(uint256)
func (_Staking *StakingCallerSession) GetNodeRewardTokensRT(_nodeAddr common.Address) (*big.Int, error) {
	return _Staking.Contract.GetNodeRewardTokensRT(&_Staking.CallOpts, _nodeAddr)
}

// GetNodeUptime is a free data retrieval call binding the contract method 0x7f92ca19.
//
// Solidity: function getNodeUptime(nodeAddr address) constant returns(uint256)
func (_Staking *StakingCaller) GetNodeUptime(opts *bind.CallOpts, nodeAddr common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "getNodeUptime", nodeAddr)
	return *ret0, err
}

// GetNodeUptime is a free data retrieval call binding the contract method 0x7f92ca19.
//
// Solidity: function getNodeUptime(nodeAddr address) constant returns(uint256)
func (_Staking *StakingSession) GetNodeUptime(nodeAddr common.Address) (*big.Int, error) {
	return _Staking.Contract.GetNodeUptime(&_Staking.CallOpts, nodeAddr)
}

// GetNodeUptime is a free data retrieval call binding the contract method 0x7f92ca19.
//
// Solidity: function getNodeUptime(nodeAddr address) constant returns(uint256)
func (_Staking *StakingCallerSession) GetNodeUptime(nodeAddr common.Address) (*big.Int, error) {
	return _Staking.Contract.GetNodeUptime(&_Staking.CallOpts, nodeAddr)
}

// InitBlkN is a free data retrieval call binding the contract method 0x95071cf6.
//
// Solidity: function initBlkN() constant returns(uint256)
func (_Staking *StakingCaller) InitBlkN(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "initBlkN")
	return *ret0, err
}

// InitBlkN is a free data retrieval call binding the contract method 0x95071cf6.
//
// Solidity: function initBlkN() constant returns(uint256)
func (_Staking *StakingSession) InitBlkN() (*big.Int, error) {
	return _Staking.Contract.InitBlkN(&_Staking.CallOpts)
}

// InitBlkN is a free data retrieval call binding the contract method 0x95071cf6.
//
// Solidity: function initBlkN() constant returns(uint256)
func (_Staking *StakingCallerSession) InitBlkN() (*big.Int, error) {
	return _Staking.Contract.InitBlkN(&_Staking.CallOpts)
}

// IsValidStakingNode is a free data retrieval call binding the contract method 0xa8e8ab38.
//
// Solidity: function isValidStakingNode(nodeAddr address) constant returns(bool)
func (_Staking *StakingCaller) IsValidStakingNode(opts *bind.CallOpts, nodeAddr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "isValidStakingNode", nodeAddr)
	return *ret0, err
}

// IsValidStakingNode is a free data retrieval call binding the contract method 0xa8e8ab38.
//
// Solidity: function isValidStakingNode(nodeAddr address) constant returns(bool)
func (_Staking *StakingSession) IsValidStakingNode(nodeAddr common.Address) (bool, error) {
	return _Staking.Contract.IsValidStakingNode(&_Staking.CallOpts, nodeAddr)
}

// IsValidStakingNode is a free data retrieval call binding the contract method 0xa8e8ab38.
//
// Solidity: function isValidStakingNode(nodeAddr address) constant returns(bool)
func (_Staking *StakingCallerSession) IsValidStakingNode(nodeAddr common.Address) (bool, error) {
	return _Staking.Contract.IsValidStakingNode(&_Staking.CallOpts, nodeAddr)
}

// LastRateUpdatedTime is a free data retrieval call binding the contract method 0xbe568059.
//
// Solidity: function lastRateUpdatedTime() constant returns(uint256)
func (_Staking *StakingCaller) LastRateUpdatedTime(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "lastRateUpdatedTime")
	return *ret0, err
}

// LastRateUpdatedTime is a free data retrieval call binding the contract method 0xbe568059.
//
// Solidity: function lastRateUpdatedTime() constant returns(uint256)
func (_Staking *StakingSession) LastRateUpdatedTime() (*big.Int, error) {
	return _Staking.Contract.LastRateUpdatedTime(&_Staking.CallOpts)
}

// LastRateUpdatedTime is a free data retrieval call binding the contract method 0xbe568059.
//
// Solidity: function lastRateUpdatedTime() constant returns(uint256)
func (_Staking *StakingCallerSession) LastRateUpdatedTime() (*big.Int, error) {
	return _Staking.Contract.LastRateUpdatedTime(&_Staking.CallOpts)
}

// MinStakePerNode is a free data retrieval call binding the contract method 0xe5f95a99.
//
// Solidity: function minStakePerNode() constant returns(uint256)
func (_Staking *StakingCaller) MinStakePerNode(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "minStakePerNode")
	return *ret0, err
}

// MinStakePerNode is a free data retrieval call binding the contract method 0xe5f95a99.
//
// Solidity: function minStakePerNode() constant returns(uint256)
func (_Staking *StakingSession) MinStakePerNode() (*big.Int, error) {
	return _Staking.Contract.MinStakePerNode(&_Staking.CallOpts)
}

// MinStakePerNode is a free data retrieval call binding the contract method 0xe5f95a99.
//
// Solidity: function minStakePerNode() constant returns(uint256)
func (_Staking *StakingCallerSession) MinStakePerNode() (*big.Int, error) {
	return _Staking.Contract.MinStakePerNode(&_Staking.CallOpts)
}

// NodeAddrs is a free data retrieval call binding the contract method 0xb4a26490.
//
// Solidity: function nodeAddrs( uint256) constant returns(address)
func (_Staking *StakingCaller) NodeAddrs(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "nodeAddrs", arg0)
	return *ret0, err
}

// NodeAddrs is a free data retrieval call binding the contract method 0xb4a26490.
//
// Solidity: function nodeAddrs( uint256) constant returns(address)
func (_Staking *StakingSession) NodeAddrs(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.NodeAddrs(&_Staking.CallOpts, arg0)
}

// NodeAddrs is a free data retrieval call binding the contract method 0xb4a26490.
//
// Solidity: function nodeAddrs( uint256) constant returns(address)
func (_Staking *StakingCallerSession) NodeAddrs(arg0 *big.Int) (common.Address, error) {
	return _Staking.Contract.NodeAddrs(&_Staking.CallOpts, arg0)
}

// NodeRunners is a free data retrieval call binding the contract method 0xbe4a455f.
//
// Solidity: function nodeRunners( address,  address) constant returns(bool)
func (_Staking *StakingCaller) NodeRunners(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "nodeRunners", arg0, arg1)
	return *ret0, err
}

// NodeRunners is a free data retrieval call binding the contract method 0xbe4a455f.
//
// Solidity: function nodeRunners( address,  address) constant returns(bool)
func (_Staking *StakingSession) NodeRunners(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Staking.Contract.NodeRunners(&_Staking.CallOpts, arg0, arg1)
}

// NodeRunners is a free data retrieval call binding the contract method 0xbe4a455f.
//
// Solidity: function nodeRunners( address,  address) constant returns(bool)
func (_Staking *StakingCallerSession) NodeRunners(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Staking.Contract.NodeRunners(&_Staking.CallOpts, arg0, arg1)
}

// NodeWithdrawable is a free data retrieval call binding the contract method 0x70841a0b.
//
// Solidity: function nodeWithdrawable(_owner address, _nodeAddr address) constant returns(uint256, uint256)
func (_Staking *StakingCaller) NodeWithdrawable(opts *bind.CallOpts, _owner common.Address, _nodeAddr common.Address) (*big.Int, *big.Int, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Staking.contract.Call(opts, out, "nodeWithdrawable", _owner, _nodeAddr)
	return *ret0, *ret1, err
}

// NodeWithdrawable is a free data retrieval call binding the contract method 0x70841a0b.
//
// Solidity: function nodeWithdrawable(_owner address, _nodeAddr address) constant returns(uint256, uint256)
func (_Staking *StakingSession) NodeWithdrawable(_owner common.Address, _nodeAddr common.Address) (*big.Int, *big.Int, error) {
	return _Staking.Contract.NodeWithdrawable(&_Staking.CallOpts, _owner, _nodeAddr)
}

// NodeWithdrawable is a free data retrieval call binding the contract method 0x70841a0b.
//
// Solidity: function nodeWithdrawable(_owner address, _nodeAddr address) constant returns(uint256, uint256)
func (_Staking *StakingCallerSession) NodeWithdrawable(_owner common.Address, _nodeAddr common.Address) (*big.Int, *big.Int, error) {
	return _Staking.Contract.NodeWithdrawable(&_Staking.CallOpts, _owner, _nodeAddr)
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes( address) constant returns(ownerAddr address, rewardCut uint256, stakedDB uint256, selfStakedAmount uint256, totalOtherDelegatedAmount uint256, accumulatedRewards uint256, accumulatedRewardIndex uint256, pendingWithdrawToken uint256, pendingWithdrawDB uint256, lastStartTime uint256, running bool, description string)
func (_Staking *StakingCaller) Nodes(opts *bind.CallOpts, arg0 common.Address) (struct {
	OwnerAddr                 common.Address
	RewardCut                 *big.Int
	StakedDB                  *big.Int
	SelfStakedAmount          *big.Int
	TotalOtherDelegatedAmount *big.Int
	AccumulatedRewards        *big.Int
	AccumulatedRewardIndex    *big.Int
	PendingWithdrawToken      *big.Int
	PendingWithdrawDB         *big.Int
	LastStartTime             *big.Int
	Running                   bool
	Description               string
}, error) {
	ret := new(struct {
		OwnerAddr                 common.Address
		RewardCut                 *big.Int
		StakedDB                  *big.Int
		SelfStakedAmount          *big.Int
		TotalOtherDelegatedAmount *big.Int
		AccumulatedRewards        *big.Int
		AccumulatedRewardIndex    *big.Int
		PendingWithdrawToken      *big.Int
		PendingWithdrawDB         *big.Int
		LastStartTime             *big.Int
		Running                   bool
		Description               string
	})
	out := ret
	err := _Staking.contract.Call(opts, out, "nodes", arg0)
	return *ret, err
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes( address) constant returns(ownerAddr address, rewardCut uint256, stakedDB uint256, selfStakedAmount uint256, totalOtherDelegatedAmount uint256, accumulatedRewards uint256, accumulatedRewardIndex uint256, pendingWithdrawToken uint256, pendingWithdrawDB uint256, lastStartTime uint256, running bool, description string)
func (_Staking *StakingSession) Nodes(arg0 common.Address) (struct {
	OwnerAddr                 common.Address
	RewardCut                 *big.Int
	StakedDB                  *big.Int
	SelfStakedAmount          *big.Int
	TotalOtherDelegatedAmount *big.Int
	AccumulatedRewards        *big.Int
	AccumulatedRewardIndex    *big.Int
	PendingWithdrawToken      *big.Int
	PendingWithdrawDB         *big.Int
	LastStartTime             *big.Int
	Running                   bool
	Description               string
}, error) {
	return _Staking.Contract.Nodes(&_Staking.CallOpts, arg0)
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes( address) constant returns(ownerAddr address, rewardCut uint256, stakedDB uint256, selfStakedAmount uint256, totalOtherDelegatedAmount uint256, accumulatedRewards uint256, accumulatedRewardIndex uint256, pendingWithdrawToken uint256, pendingWithdrawDB uint256, lastStartTime uint256, running bool, description string)
func (_Staking *StakingCallerSession) Nodes(arg0 common.Address) (struct {
	OwnerAddr                 common.Address
	RewardCut                 *big.Int
	StakedDB                  *big.Int
	SelfStakedAmount          *big.Int
	TotalOtherDelegatedAmount *big.Int
	AccumulatedRewards        *big.Int
	AccumulatedRewardIndex    *big.Int
	PendingWithdrawToken      *big.Int
	PendingWithdrawDB         *big.Int
	LastStartTime             *big.Int
	Running                   bool
	Description               string
}, error) {
	return _Staking.Contract.Nodes(&_Staking.CallOpts, arg0)
}

// StakingRewardsVault is a free data retrieval call binding the contract method 0xcd45dbcb.
//
// Solidity: function stakingRewardsVault() constant returns(address)
func (_Staking *StakingCaller) StakingRewardsVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "stakingRewardsVault")
	return *ret0, err
}

// StakingRewardsVault is a free data retrieval call binding the contract method 0xcd45dbcb.
//
// Solidity: function stakingRewardsVault() constant returns(address)
func (_Staking *StakingSession) StakingRewardsVault() (common.Address, error) {
	return _Staking.Contract.StakingRewardsVault(&_Staking.CallOpts)
}

// StakingRewardsVault is a free data retrieval call binding the contract method 0xcd45dbcb.
//
// Solidity: function stakingRewardsVault() constant returns(address)
func (_Staking *StakingCallerSession) StakingRewardsVault() (common.Address, error) {
	return _Staking.Contract.StakingRewardsVault(&_Staking.CallOpts)
}

// TotalStakedTokens is a free data retrieval call binding the contract method 0x3ae73259.
//
// Solidity: function totalStakedTokens() constant returns(uint256)
func (_Staking *StakingCaller) TotalStakedTokens(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "totalStakedTokens")
	return *ret0, err
}

// TotalStakedTokens is a free data retrieval call binding the contract method 0x3ae73259.
//
// Solidity: function totalStakedTokens() constant returns(uint256)
func (_Staking *StakingSession) TotalStakedTokens() (*big.Int, error) {
	return _Staking.Contract.TotalStakedTokens(&_Staking.CallOpts)
}

// TotalStakedTokens is a free data retrieval call binding the contract method 0x3ae73259.
//
// Solidity: function totalStakedTokens() constant returns(uint256)
func (_Staking *StakingCallerSession) TotalStakedTokens() (*big.Int, error) {
	return _Staking.Contract.TotalStakedTokens(&_Staking.CallOpts)
}

// UnbondDuration is a free data retrieval call binding the contract method 0xc4393444.
//
// Solidity: function unbondDuration() constant returns(uint256)
func (_Staking *StakingCaller) UnbondDuration(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Staking.contract.Call(opts, out, "unbondDuration")
	return *ret0, err
}

// UnbondDuration is a free data retrieval call binding the contract method 0xc4393444.
//
// Solidity: function unbondDuration() constant returns(uint256)
func (_Staking *StakingSession) UnbondDuration() (*big.Int, error) {
	return _Staking.Contract.UnbondDuration(&_Staking.CallOpts)
}

// UnbondDuration is a free data retrieval call binding the contract method 0xc4393444.
//
// Solidity: function unbondDuration() constant returns(uint256)
func (_Staking *StakingCallerSession) UnbondDuration() (*big.Int, error) {
	return _Staking.Contract.UnbondDuration(&_Staking.CallOpts)
}

// Delegate is a paid mutator transaction binding the contract method 0x08bbb824.
//
// Solidity: function delegate(_tokenAmount uint256, _nodeAddr address) returns()
func (_Staking *StakingTransactor) Delegate(opts *bind.TransactOpts, _tokenAmount *big.Int, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "delegate", _tokenAmount, _nodeAddr)
}

// Delegate is a paid mutator transaction binding the contract method 0x08bbb824.
//
// Solidity: function delegate(_tokenAmount uint256, _nodeAddr address) returns()
func (_Staking *StakingSession) Delegate(_tokenAmount *big.Int, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Delegate(&_Staking.TransactOpts, _tokenAmount, _nodeAddr)
}

// Delegate is a paid mutator transaction binding the contract method 0x08bbb824.
//
// Solidity: function delegate(_tokenAmount uint256, _nodeAddr address) returns()
func (_Staking *StakingTransactorSession) Delegate(_tokenAmount *big.Int, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Delegate(&_Staking.TransactOpts, _tokenAmount, _nodeAddr)
}

// DelegatorClaimReward is a paid mutator transaction binding the contract method 0x1cac57ec.
//
// Solidity: function delegatorClaimReward(_nodeAddr address) returns()
func (_Staking *StakingTransactor) DelegatorClaimReward(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "delegatorClaimReward", _nodeAddr)
}

// DelegatorClaimReward is a paid mutator transaction binding the contract method 0x1cac57ec.
//
// Solidity: function delegatorClaimReward(_nodeAddr address) returns()
func (_Staking *StakingSession) DelegatorClaimReward(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.DelegatorClaimReward(&_Staking.TransactOpts, _nodeAddr)
}

// DelegatorClaimReward is a paid mutator transaction binding the contract method 0x1cac57ec.
//
// Solidity: function delegatorClaimReward(_nodeAddr address) returns()
func (_Staking *StakingTransactorSession) DelegatorClaimReward(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.DelegatorClaimReward(&_Staking.TransactOpts, _nodeAddr)
}

// DelegatorUnbond is a paid mutator transaction binding the contract method 0x95d516dd.
//
// Solidity: function delegatorUnbond(_tokenAmount uint256, _nodeAddr address) returns()
func (_Staking *StakingTransactor) DelegatorUnbond(opts *bind.TransactOpts, _tokenAmount *big.Int, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "delegatorUnbond", _tokenAmount, _nodeAddr)
}

// DelegatorUnbond is a paid mutator transaction binding the contract method 0x95d516dd.
//
// Solidity: function delegatorUnbond(_tokenAmount uint256, _nodeAddr address) returns()
func (_Staking *StakingSession) DelegatorUnbond(_tokenAmount *big.Int, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.DelegatorUnbond(&_Staking.TransactOpts, _tokenAmount, _nodeAddr)
}

// DelegatorUnbond is a paid mutator transaction binding the contract method 0x95d516dd.
//
// Solidity: function delegatorUnbond(_tokenAmount uint256, _nodeAddr address) returns()
func (_Staking *StakingTransactorSession) DelegatorUnbond(_tokenAmount *big.Int, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.DelegatorUnbond(&_Staking.TransactOpts, _tokenAmount, _nodeAddr)
}

// DelegatorWithdraw is a paid mutator transaction binding the contract method 0xc314bb99.
//
// Solidity: function delegatorWithdraw(_nodeAddr address) returns()
func (_Staking *StakingTransactor) DelegatorWithdraw(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "delegatorWithdraw", _nodeAddr)
}

// DelegatorWithdraw is a paid mutator transaction binding the contract method 0xc314bb99.
//
// Solidity: function delegatorWithdraw(_nodeAddr address) returns()
func (_Staking *StakingSession) DelegatorWithdraw(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.DelegatorWithdraw(&_Staking.TransactOpts, _nodeAddr)
}

// DelegatorWithdraw is a paid mutator transaction binding the contract method 0xc314bb99.
//
// Solidity: function delegatorWithdraw(_nodeAddr address) returns()
func (_Staking *StakingTransactorSession) DelegatorWithdraw(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.DelegatorWithdraw(&_Staking.TransactOpts, _nodeAddr)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(_dostoken address, _dbtoken address, _vault address, _bridgeAddr address) returns()
func (_Staking *StakingTransactor) Initialize(opts *bind.TransactOpts, _dostoken common.Address, _dbtoken common.Address, _vault common.Address, _bridgeAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "initialize", _dostoken, _dbtoken, _vault, _bridgeAddr)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(_dostoken address, _dbtoken address, _vault address, _bridgeAddr address) returns()
func (_Staking *StakingSession) Initialize(_dostoken common.Address, _dbtoken common.Address, _vault common.Address, _bridgeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Initialize(&_Staking.TransactOpts, _dostoken, _dbtoken, _vault, _bridgeAddr)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(_dostoken address, _dbtoken address, _vault address, _bridgeAddr address) returns()
func (_Staking *StakingTransactorSession) Initialize(_dostoken common.Address, _dbtoken common.Address, _vault common.Address, _bridgeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.Initialize(&_Staking.TransactOpts, _dostoken, _dbtoken, _vault, _bridgeAddr)
}

// NewNode is a paid mutator transaction binding the contract method 0x867f121a.
//
// Solidity: function newNode(_nodeAddr address, _tokenAmount uint256, _dropburnAmount uint256, _rewardCut uint256, _desc string) returns()
func (_Staking *StakingTransactor) NewNode(opts *bind.TransactOpts, _nodeAddr common.Address, _tokenAmount *big.Int, _dropburnAmount *big.Int, _rewardCut *big.Int, _desc string) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "newNode", _nodeAddr, _tokenAmount, _dropburnAmount, _rewardCut, _desc)
}

// NewNode is a paid mutator transaction binding the contract method 0x867f121a.
//
// Solidity: function newNode(_nodeAddr address, _tokenAmount uint256, _dropburnAmount uint256, _rewardCut uint256, _desc string) returns()
func (_Staking *StakingSession) NewNode(_nodeAddr common.Address, _tokenAmount *big.Int, _dropburnAmount *big.Int, _rewardCut *big.Int, _desc string) (*types.Transaction, error) {
	return _Staking.Contract.NewNode(&_Staking.TransactOpts, _nodeAddr, _tokenAmount, _dropburnAmount, _rewardCut, _desc)
}

// NewNode is a paid mutator transaction binding the contract method 0x867f121a.
//
// Solidity: function newNode(_nodeAddr address, _tokenAmount uint256, _dropburnAmount uint256, _rewardCut uint256, _desc string) returns()
func (_Staking *StakingTransactorSession) NewNode(_nodeAddr common.Address, _tokenAmount *big.Int, _dropburnAmount *big.Int, _rewardCut *big.Int, _desc string) (*types.Transaction, error) {
	return _Staking.Contract.NewNode(&_Staking.TransactOpts, _nodeAddr, _tokenAmount, _dropburnAmount, _rewardCut, _desc)
}

// NodeClaimReward is a paid mutator transaction binding the contract method 0xb41b0f96.
//
// Solidity: function nodeClaimReward(_nodeAddr address) returns()
func (_Staking *StakingTransactor) NodeClaimReward(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "nodeClaimReward", _nodeAddr)
}

// NodeClaimReward is a paid mutator transaction binding the contract method 0xb41b0f96.
//
// Solidity: function nodeClaimReward(_nodeAddr address) returns()
func (_Staking *StakingSession) NodeClaimReward(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeClaimReward(&_Staking.TransactOpts, _nodeAddr)
}

// NodeClaimReward is a paid mutator transaction binding the contract method 0xb41b0f96.
//
// Solidity: function nodeClaimReward(_nodeAddr address) returns()
func (_Staking *StakingTransactorSession) NodeClaimReward(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeClaimReward(&_Staking.TransactOpts, _nodeAddr)
}

// NodeStart is a paid mutator transaction binding the contract method 0x4c542d3d.
//
// Solidity: function nodeStart(_nodeAddr address) returns()
func (_Staking *StakingTransactor) NodeStart(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "nodeStart", _nodeAddr)
}

// NodeStart is a paid mutator transaction binding the contract method 0x4c542d3d.
//
// Solidity: function nodeStart(_nodeAddr address) returns()
func (_Staking *StakingSession) NodeStart(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeStart(&_Staking.TransactOpts, _nodeAddr)
}

// NodeStart is a paid mutator transaction binding the contract method 0x4c542d3d.
//
// Solidity: function nodeStart(_nodeAddr address) returns()
func (_Staking *StakingTransactorSession) NodeStart(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeStart(&_Staking.TransactOpts, _nodeAddr)
}

// NodeStop is a paid mutator transaction binding the contract method 0xc5375c29.
//
// Solidity: function nodeStop(_nodeAddr address) returns()
func (_Staking *StakingTransactor) NodeStop(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "nodeStop", _nodeAddr)
}

// NodeStop is a paid mutator transaction binding the contract method 0xc5375c29.
//
// Solidity: function nodeStop(_nodeAddr address) returns()
func (_Staking *StakingSession) NodeStop(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeStop(&_Staking.TransactOpts, _nodeAddr)
}

// NodeStop is a paid mutator transaction binding the contract method 0xc5375c29.
//
// Solidity: function nodeStop(_nodeAddr address) returns()
func (_Staking *StakingTransactorSession) NodeStop(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeStop(&_Staking.TransactOpts, _nodeAddr)
}

// NodeUnbond is a paid mutator transaction binding the contract method 0x508b74fe.
//
// Solidity: function nodeUnbond(_tokenAmount uint256, _dropburnAmount uint256, _nodeAddr address) returns()
func (_Staking *StakingTransactor) NodeUnbond(opts *bind.TransactOpts, _tokenAmount *big.Int, _dropburnAmount *big.Int, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "nodeUnbond", _tokenAmount, _dropburnAmount, _nodeAddr)
}

// NodeUnbond is a paid mutator transaction binding the contract method 0x508b74fe.
//
// Solidity: function nodeUnbond(_tokenAmount uint256, _dropburnAmount uint256, _nodeAddr address) returns()
func (_Staking *StakingSession) NodeUnbond(_tokenAmount *big.Int, _dropburnAmount *big.Int, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeUnbond(&_Staking.TransactOpts, _tokenAmount, _dropburnAmount, _nodeAddr)
}

// NodeUnbond is a paid mutator transaction binding the contract method 0x508b74fe.
//
// Solidity: function nodeUnbond(_tokenAmount uint256, _dropburnAmount uint256, _nodeAddr address) returns()
func (_Staking *StakingTransactorSession) NodeUnbond(_tokenAmount *big.Int, _dropburnAmount *big.Int, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeUnbond(&_Staking.TransactOpts, _tokenAmount, _dropburnAmount, _nodeAddr)
}

// NodeUnregister is a paid mutator transaction binding the contract method 0xa2772193.
//
// Solidity: function nodeUnregister(_nodeAddr address) returns()
func (_Staking *StakingTransactor) NodeUnregister(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "nodeUnregister", _nodeAddr)
}

// NodeUnregister is a paid mutator transaction binding the contract method 0xa2772193.
//
// Solidity: function nodeUnregister(_nodeAddr address) returns()
func (_Staking *StakingSession) NodeUnregister(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeUnregister(&_Staking.TransactOpts, _nodeAddr)
}

// NodeUnregister is a paid mutator transaction binding the contract method 0xa2772193.
//
// Solidity: function nodeUnregister(_nodeAddr address) returns()
func (_Staking *StakingTransactorSession) NodeUnregister(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeUnregister(&_Staking.TransactOpts, _nodeAddr)
}

// NodeWithdraw is a paid mutator transaction binding the contract method 0x4ecea80d.
//
// Solidity: function nodeWithdraw(_nodeAddr address) returns()
func (_Staking *StakingTransactor) NodeWithdraw(opts *bind.TransactOpts, _nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "nodeWithdraw", _nodeAddr)
}

// NodeWithdraw is a paid mutator transaction binding the contract method 0x4ecea80d.
//
// Solidity: function nodeWithdraw(_nodeAddr address) returns()
func (_Staking *StakingSession) NodeWithdraw(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeWithdraw(&_Staking.TransactOpts, _nodeAddr)
}

// NodeWithdraw is a paid mutator transaction binding the contract method 0x4ecea80d.
//
// Solidity: function nodeWithdraw(_nodeAddr address) returns()
func (_Staking *StakingTransactorSession) NodeWithdraw(_nodeAddr common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NodeWithdraw(&_Staking.TransactOpts, _nodeAddr)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(newAdmin address) returns()
func (_Staking *StakingTransactor) SetAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setAdmin", newAdmin)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(newAdmin address) returns()
func (_Staking *StakingSession) SetAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Staking.Contract.SetAdmin(&_Staking.TransactOpts, newAdmin)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(newAdmin address) returns()
func (_Staking *StakingTransactorSession) SetAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Staking.Contract.SetAdmin(&_Staking.TransactOpts, newAdmin)
}

// SetCirculatingSupply is a paid mutator transaction binding the contract method 0xb1764071.
//
// Solidity: function setCirculatingSupply(_newSupply uint256) returns()
func (_Staking *StakingTransactor) SetCirculatingSupply(opts *bind.TransactOpts, _newSupply *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setCirculatingSupply", _newSupply)
}

// SetCirculatingSupply is a paid mutator transaction binding the contract method 0xb1764071.
//
// Solidity: function setCirculatingSupply(_newSupply uint256) returns()
func (_Staking *StakingSession) SetCirculatingSupply(_newSupply *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetCirculatingSupply(&_Staking.TransactOpts, _newSupply)
}

// SetCirculatingSupply is a paid mutator transaction binding the contract method 0xb1764071.
//
// Solidity: function setCirculatingSupply(_newSupply uint256) returns()
func (_Staking *StakingTransactorSession) SetCirculatingSupply(_newSupply *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetCirculatingSupply(&_Staking.TransactOpts, _newSupply)
}

// SetDropBurnMaxQuota is a paid mutator transaction binding the contract method 0x3f3381e1.
//
// Solidity: function setDropBurnMaxQuota(_quota uint256) returns()
func (_Staking *StakingTransactor) SetDropBurnMaxQuota(opts *bind.TransactOpts, _quota *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setDropBurnMaxQuota", _quota)
}

// SetDropBurnMaxQuota is a paid mutator transaction binding the contract method 0x3f3381e1.
//
// Solidity: function setDropBurnMaxQuota(_quota uint256) returns()
func (_Staking *StakingSession) SetDropBurnMaxQuota(_quota *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetDropBurnMaxQuota(&_Staking.TransactOpts, _quota)
}

// SetDropBurnMaxQuota is a paid mutator transaction binding the contract method 0x3f3381e1.
//
// Solidity: function setDropBurnMaxQuota(_quota uint256) returns()
func (_Staking *StakingTransactorSession) SetDropBurnMaxQuota(_quota *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetDropBurnMaxQuota(&_Staking.TransactOpts, _quota)
}

// SetMinStakePerNode is a paid mutator transaction binding the contract method 0x8b0bc845.
//
// Solidity: function setMinStakePerNode(_minStake uint256) returns()
func (_Staking *StakingTransactor) SetMinStakePerNode(opts *bind.TransactOpts, _minStake *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setMinStakePerNode", _minStake)
}

// SetMinStakePerNode is a paid mutator transaction binding the contract method 0x8b0bc845.
//
// Solidity: function setMinStakePerNode(_minStake uint256) returns()
func (_Staking *StakingSession) SetMinStakePerNode(_minStake *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinStakePerNode(&_Staking.TransactOpts, _minStake)
}

// SetMinStakePerNode is a paid mutator transaction binding the contract method 0x8b0bc845.
//
// Solidity: function setMinStakePerNode(_minStake uint256) returns()
func (_Staking *StakingTransactorSession) SetMinStakePerNode(_minStake *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetMinStakePerNode(&_Staking.TransactOpts, _minStake)
}

// SetUnbondDuration is a paid mutator transaction binding the contract method 0xb16d2d58.
//
// Solidity: function setUnbondDuration(_duration uint256) returns()
func (_Staking *StakingTransactor) SetUnbondDuration(opts *bind.TransactOpts, _duration *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setUnbondDuration", _duration)
}

// SetUnbondDuration is a paid mutator transaction binding the contract method 0xb16d2d58.
//
// Solidity: function setUnbondDuration(_duration uint256) returns()
func (_Staking *StakingSession) SetUnbondDuration(_duration *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetUnbondDuration(&_Staking.TransactOpts, _duration)
}

// SetUnbondDuration is a paid mutator transaction binding the contract method 0xb16d2d58.
//
// Solidity: function setUnbondDuration(_duration uint256) returns()
func (_Staking *StakingTransactorSession) SetUnbondDuration(_duration *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.SetUnbondDuration(&_Staking.TransactOpts, _duration)
}

// UpdateNodeStaking is a paid mutator transaction binding the contract method 0x644fc9cf.
//
// Solidity: function updateNodeStaking(_nodeAddr address, _newTokenAmount uint256, _newDropburnAmount uint256, _newCut uint256, _newDesc string) returns()
func (_Staking *StakingTransactor) UpdateNodeStaking(opts *bind.TransactOpts, _nodeAddr common.Address, _newTokenAmount *big.Int, _newDropburnAmount *big.Int, _newCut *big.Int, _newDesc string) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "updateNodeStaking", _nodeAddr, _newTokenAmount, _newDropburnAmount, _newCut, _newDesc)
}

// UpdateNodeStaking is a paid mutator transaction binding the contract method 0x644fc9cf.
//
// Solidity: function updateNodeStaking(_nodeAddr address, _newTokenAmount uint256, _newDropburnAmount uint256, _newCut uint256, _newDesc string) returns()
func (_Staking *StakingSession) UpdateNodeStaking(_nodeAddr common.Address, _newTokenAmount *big.Int, _newDropburnAmount *big.Int, _newCut *big.Int, _newDesc string) (*types.Transaction, error) {
	return _Staking.Contract.UpdateNodeStaking(&_Staking.TransactOpts, _nodeAddr, _newTokenAmount, _newDropburnAmount, _newCut, _newDesc)
}

// UpdateNodeStaking is a paid mutator transaction binding the contract method 0x644fc9cf.
//
// Solidity: function updateNodeStaking(_nodeAddr address, _newTokenAmount uint256, _newDropburnAmount uint256, _newCut uint256, _newDesc string) returns()
func (_Staking *StakingTransactorSession) UpdateNodeStaking(_nodeAddr common.Address, _newTokenAmount *big.Int, _newDropburnAmount *big.Int, _newCut *big.Int, _newDesc string) (*types.Transaction, error) {
	return _Staking.Contract.UpdateNodeStaking(&_Staking.TransactOpts, _nodeAddr, _newTokenAmount, _newDropburnAmount, _newCut, _newDesc)
}

// StakingClaimRewardIterator is returned from FilterClaimReward and is used to iterate over the raw logs and unpacked data for ClaimReward events raised by the Staking contract.
type StakingClaimRewardIterator struct {
	Event *StakingClaimReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingClaimRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingClaimReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingClaimReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingClaimRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingClaimRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingClaimReward represents a ClaimReward event raised by the Staking contract.
type StakingClaimReward struct {
	To         common.Address
	NodeRunner bool
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterClaimReward is a free log retrieval operation binding the contract event 0x70f2476b8214c2f4e6fc47e4adb3c9adca3cc0e0e6c9a9d7b0e2626ce83cbc40.
//
// Solidity: e ClaimReward(to indexed address, nodeRunner bool, amount uint256)
func (_Staking *StakingFilterer) FilterClaimReward(opts *bind.FilterOpts, to []common.Address) (*StakingClaimRewardIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "ClaimReward", toRule)
	if err != nil {
		return nil, err
	}
	return &StakingClaimRewardIterator{contract: _Staking.contract, event: "ClaimReward", logs: logs, sub: sub}, nil
}

// WatchClaimReward is a free log subscription operation binding the contract event 0x70f2476b8214c2f4e6fc47e4adb3c9adca3cc0e0e6c9a9d7b0e2626ce83cbc40.
//
// Solidity: e ClaimReward(to indexed address, nodeRunner bool, amount uint256)
func (_Staking *StakingFilterer) WatchClaimReward(opts *bind.WatchOpts, sink chan<- *StakingClaimReward, to []common.Address) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "ClaimReward", toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingClaimReward)
				if err := _Staking.contract.UnpackLog(event, "ClaimReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingDelegateIterator is returned from FilterDelegate and is used to iterate over the raw logs and unpacked data for Delegate events raised by the Staking contract.
type StakingDelegateIterator struct {
	Event *StakingDelegate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingDelegateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingDelegate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingDelegate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingDelegateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingDelegateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingDelegate represents a Delegate event raised by the Staking contract.
type StakingDelegate struct {
	From   common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDelegate is a free log retrieval operation binding the contract event 0x510b11bb3f3c799b11307c01ab7db0d335683ef5b2da98f7697de744f465eacc.
//
// Solidity: e Delegate(from indexed address, to indexed address, amount uint256)
func (_Staking *StakingFilterer) FilterDelegate(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*StakingDelegateIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Delegate", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &StakingDelegateIterator{contract: _Staking.contract, event: "Delegate", logs: logs, sub: sub}, nil
}

// WatchDelegate is a free log subscription operation binding the contract event 0x510b11bb3f3c799b11307c01ab7db0d335683ef5b2da98f7697de744f465eacc.
//
// Solidity: e Delegate(from indexed address, to indexed address, amount uint256)
func (_Staking *StakingFilterer) WatchDelegate(opts *bind.WatchOpts, sink chan<- *StakingDelegate, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Delegate", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingDelegate)
				if err := _Staking.contract.UnpackLog(event, "Delegate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingNewNodeIterator is returned from FilterNewNode and is used to iterate over the raw logs and unpacked data for NewNode events raised by the Staking contract.
type StakingNewNodeIterator struct {
	Event *StakingNewNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingNewNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingNewNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingNewNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingNewNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingNewNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingNewNode represents a NewNode event raised by the Staking contract.
type StakingNewNode struct {
	Owner            common.Address
	NodeAddress      common.Address
	SelfStakedAmount *big.Int
	StakedDB         *big.Int
	RewardCut        *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterNewNode is a free log retrieval operation binding the contract event 0x08f38bdd2a12d30a92014fb5523763d3d147ea395e40f81c241eea1a6af0cdfc.
//
// Solidity: e NewNode(owner indexed address, nodeAddress indexed address, selfStakedAmount uint256, stakedDB uint256, rewardCut uint256)
func (_Staking *StakingFilterer) FilterNewNode(opts *bind.FilterOpts, owner []common.Address, nodeAddress []common.Address) (*StakingNewNodeIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var nodeAddressRule []interface{}
	for _, nodeAddressItem := range nodeAddress {
		nodeAddressRule = append(nodeAddressRule, nodeAddressItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "NewNode", ownerRule, nodeAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingNewNodeIterator{contract: _Staking.contract, event: "NewNode", logs: logs, sub: sub}, nil
}

// WatchNewNode is a free log subscription operation binding the contract event 0x08f38bdd2a12d30a92014fb5523763d3d147ea395e40f81c241eea1a6af0cdfc.
//
// Solidity: e NewNode(owner indexed address, nodeAddress indexed address, selfStakedAmount uint256, stakedDB uint256, rewardCut uint256)
func (_Staking *StakingFilterer) WatchNewNode(opts *bind.WatchOpts, sink chan<- *StakingNewNode, owner []common.Address, nodeAddress []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var nodeAddressRule []interface{}
	for _, nodeAddressItem := range nodeAddress {
		nodeAddressRule = append(nodeAddressRule, nodeAddressItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "NewNode", ownerRule, nodeAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingNewNode)
				if err := _Staking.contract.UnpackLog(event, "NewNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingUnbondIterator is returned from FilterUnbond and is used to iterate over the raw logs and unpacked data for Unbond events raised by the Staking contract.
type StakingUnbondIterator struct {
	Event *StakingUnbond // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUnbondIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUnbond)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUnbond)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUnbondIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUnbondIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUnbond represents a Unbond event raised by the Staking contract.
type StakingUnbond struct {
	From           common.Address
	To             common.Address
	NodeRunner     bool
	TokenAmount    *big.Int
	DropburnAmount *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUnbond is a free log retrieval operation binding the contract event 0x882043d8baf498c3af74efc34e0973ddc34e0e5a0351d84132ab0c7032b89160.
//
// Solidity: e Unbond(from indexed address, to indexed address, nodeRunner bool, tokenAmount uint256, dropburnAmount uint256)
func (_Staking *StakingFilterer) FilterUnbond(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*StakingUnbondIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Unbond", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &StakingUnbondIterator{contract: _Staking.contract, event: "Unbond", logs: logs, sub: sub}, nil
}

// WatchUnbond is a free log subscription operation binding the contract event 0x882043d8baf498c3af74efc34e0973ddc34e0e5a0351d84132ab0c7032b89160.
//
// Solidity: e Unbond(from indexed address, to indexed address, nodeRunner bool, tokenAmount uint256, dropburnAmount uint256)
func (_Staking *StakingFilterer) WatchUnbond(opts *bind.WatchOpts, sink chan<- *StakingUnbond, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Unbond", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUnbond)
				if err := _Staking.contract.UnpackLog(event, "Unbond", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingUpdateCirculatingSupplyIterator is returned from FilterUpdateCirculatingSupply and is used to iterate over the raw logs and unpacked data for UpdateCirculatingSupply events raised by the Staking contract.
type StakingUpdateCirculatingSupplyIterator struct {
	Event *StakingUpdateCirculatingSupply // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUpdateCirculatingSupplyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUpdateCirculatingSupply)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUpdateCirculatingSupply)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUpdateCirculatingSupplyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUpdateCirculatingSupplyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUpdateCirculatingSupply represents a UpdateCirculatingSupply event raised by the Staking contract.
type StakingUpdateCirculatingSupply struct {
	OldCirculatingSupply *big.Int
	NewCirculatingSupply *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterUpdateCirculatingSupply is a free log retrieval operation binding the contract event 0xef08ea314c41dc78bc73676b156d3b7802c096dd7a552f7f514a80967aba10ac.
//
// Solidity: e UpdateCirculatingSupply(oldCirculatingSupply uint256, newCirculatingSupply uint256)
func (_Staking *StakingFilterer) FilterUpdateCirculatingSupply(opts *bind.FilterOpts) (*StakingUpdateCirculatingSupplyIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UpdateCirculatingSupply")
	if err != nil {
		return nil, err
	}
	return &StakingUpdateCirculatingSupplyIterator{contract: _Staking.contract, event: "UpdateCirculatingSupply", logs: logs, sub: sub}, nil
}

// WatchUpdateCirculatingSupply is a free log subscription operation binding the contract event 0xef08ea314c41dc78bc73676b156d3b7802c096dd7a552f7f514a80967aba10ac.
//
// Solidity: e UpdateCirculatingSupply(oldCirculatingSupply uint256, newCirculatingSupply uint256)
func (_Staking *StakingFilterer) WatchUpdateCirculatingSupply(opts *bind.WatchOpts, sink chan<- *StakingUpdateCirculatingSupply) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UpdateCirculatingSupply")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUpdateCirculatingSupply)
				if err := _Staking.contract.UnpackLog(event, "UpdateCirculatingSupply", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingUpdateDropBurnMaxQuotaIterator is returned from FilterUpdateDropBurnMaxQuota and is used to iterate over the raw logs and unpacked data for UpdateDropBurnMaxQuota events raised by the Staking contract.
type StakingUpdateDropBurnMaxQuotaIterator struct {
	Event *StakingUpdateDropBurnMaxQuota // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUpdateDropBurnMaxQuotaIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUpdateDropBurnMaxQuota)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUpdateDropBurnMaxQuota)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUpdateDropBurnMaxQuotaIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUpdateDropBurnMaxQuotaIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUpdateDropBurnMaxQuota represents a UpdateDropBurnMaxQuota event raised by the Staking contract.
type StakingUpdateDropBurnMaxQuota struct {
	OldQuota *big.Int
	NewQuota *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUpdateDropBurnMaxQuota is a free log retrieval operation binding the contract event 0x0aee95cca46da64ee373e28dee5994361b4002c54035d92932c9825b76382e99.
//
// Solidity: e UpdateDropBurnMaxQuota(oldQuota uint256, newQuota uint256)
func (_Staking *StakingFilterer) FilterUpdateDropBurnMaxQuota(opts *bind.FilterOpts) (*StakingUpdateDropBurnMaxQuotaIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UpdateDropBurnMaxQuota")
	if err != nil {
		return nil, err
	}
	return &StakingUpdateDropBurnMaxQuotaIterator{contract: _Staking.contract, event: "UpdateDropBurnMaxQuota", logs: logs, sub: sub}, nil
}

// WatchUpdateDropBurnMaxQuota is a free log subscription operation binding the contract event 0x0aee95cca46da64ee373e28dee5994361b4002c54035d92932c9825b76382e99.
//
// Solidity: e UpdateDropBurnMaxQuota(oldQuota uint256, newQuota uint256)
func (_Staking *StakingFilterer) WatchUpdateDropBurnMaxQuota(opts *bind.WatchOpts, sink chan<- *StakingUpdateDropBurnMaxQuota) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UpdateDropBurnMaxQuota")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUpdateDropBurnMaxQuota)
				if err := _Staking.contract.UnpackLog(event, "UpdateDropBurnMaxQuota", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingUpdateMinStakePerNodeIterator is returned from FilterUpdateMinStakePerNode and is used to iterate over the raw logs and unpacked data for UpdateMinStakePerNode events raised by the Staking contract.
type StakingUpdateMinStakePerNodeIterator struct {
	Event *StakingUpdateMinStakePerNode // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUpdateMinStakePerNodeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUpdateMinStakePerNode)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUpdateMinStakePerNode)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUpdateMinStakePerNodeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUpdateMinStakePerNodeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUpdateMinStakePerNode represents a UpdateMinStakePerNode event raised by the Staking contract.
type StakingUpdateMinStakePerNode struct {
	OldMinStakePerNode *big.Int
	NewMinStakePerNode *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterUpdateMinStakePerNode is a free log retrieval operation binding the contract event 0x89892efa8f66455fa9bf996b1444e79778d71795cf00089fadf89071a3896ebb.
//
// Solidity: e UpdateMinStakePerNode(oldMinStakePerNode uint256, newMinStakePerNode uint256)
func (_Staking *StakingFilterer) FilterUpdateMinStakePerNode(opts *bind.FilterOpts) (*StakingUpdateMinStakePerNodeIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UpdateMinStakePerNode")
	if err != nil {
		return nil, err
	}
	return &StakingUpdateMinStakePerNodeIterator{contract: _Staking.contract, event: "UpdateMinStakePerNode", logs: logs, sub: sub}, nil
}

// WatchUpdateMinStakePerNode is a free log subscription operation binding the contract event 0x89892efa8f66455fa9bf996b1444e79778d71795cf00089fadf89071a3896ebb.
//
// Solidity: e UpdateMinStakePerNode(oldMinStakePerNode uint256, newMinStakePerNode uint256)
func (_Staking *StakingFilterer) WatchUpdateMinStakePerNode(opts *bind.WatchOpts, sink chan<- *StakingUpdateMinStakePerNode) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UpdateMinStakePerNode")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUpdateMinStakePerNode)
				if err := _Staking.contract.UnpackLog(event, "UpdateMinStakePerNode", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingUpdateStakingAdminIterator is returned from FilterUpdateStakingAdmin and is used to iterate over the raw logs and unpacked data for UpdateStakingAdmin events raised by the Staking contract.
type StakingUpdateStakingAdminIterator struct {
	Event *StakingUpdateStakingAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUpdateStakingAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUpdateStakingAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUpdateStakingAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUpdateStakingAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUpdateStakingAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUpdateStakingAdmin represents a UpdateStakingAdmin event raised by the Staking contract.
type StakingUpdateStakingAdmin struct {
	OldAdmin common.Address
	NewAdmin common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterUpdateStakingAdmin is a free log retrieval operation binding the contract event 0xb2f7a3425615a6c40cd662f1fac51ca4343e78421401f252068a0a4a42070ffe.
//
// Solidity: e UpdateStakingAdmin(oldAdmin address, newAdmin address)
func (_Staking *StakingFilterer) FilterUpdateStakingAdmin(opts *bind.FilterOpts) (*StakingUpdateStakingAdminIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UpdateStakingAdmin")
	if err != nil {
		return nil, err
	}
	return &StakingUpdateStakingAdminIterator{contract: _Staking.contract, event: "UpdateStakingAdmin", logs: logs, sub: sub}, nil
}

// WatchUpdateStakingAdmin is a free log subscription operation binding the contract event 0xb2f7a3425615a6c40cd662f1fac51ca4343e78421401f252068a0a4a42070ffe.
//
// Solidity: e UpdateStakingAdmin(oldAdmin address, newAdmin address)
func (_Staking *StakingFilterer) WatchUpdateStakingAdmin(opts *bind.WatchOpts, sink chan<- *StakingUpdateStakingAdmin) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UpdateStakingAdmin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUpdateStakingAdmin)
				if err := _Staking.contract.UnpackLog(event, "UpdateStakingAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingUpdateUnbondDurationIterator is returned from FilterUpdateUnbondDuration and is used to iterate over the raw logs and unpacked data for UpdateUnbondDuration events raised by the Staking contract.
type StakingUpdateUnbondDurationIterator struct {
	Event *StakingUpdateUnbondDuration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingUpdateUnbondDurationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingUpdateUnbondDuration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingUpdateUnbondDuration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingUpdateUnbondDurationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingUpdateUnbondDurationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingUpdateUnbondDuration represents a UpdateUnbondDuration event raised by the Staking contract.
type StakingUpdateUnbondDuration struct {
	OldDuration *big.Int
	NewDuration *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateUnbondDuration is a free log retrieval operation binding the contract event 0x8671d68a1c48206a7cde676b141ee222482f2014d09ad75af8f5ee2118af9b99.
//
// Solidity: e UpdateUnbondDuration(oldDuration uint256, newDuration uint256)
func (_Staking *StakingFilterer) FilterUpdateUnbondDuration(opts *bind.FilterOpts) (*StakingUpdateUnbondDurationIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "UpdateUnbondDuration")
	if err != nil {
		return nil, err
	}
	return &StakingUpdateUnbondDurationIterator{contract: _Staking.contract, event: "UpdateUnbondDuration", logs: logs, sub: sub}, nil
}

// WatchUpdateUnbondDuration is a free log subscription operation binding the contract event 0x8671d68a1c48206a7cde676b141ee222482f2014d09ad75af8f5ee2118af9b99.
//
// Solidity: e UpdateUnbondDuration(oldDuration uint256, newDuration uint256)
func (_Staking *StakingFilterer) WatchUpdateUnbondDuration(opts *bind.WatchOpts, sink chan<- *StakingUpdateUnbondDuration) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "UpdateUnbondDuration")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingUpdateUnbondDuration)
				if err := _Staking.contract.UnpackLog(event, "UpdateUnbondDuration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// StakingWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Staking contract.
type StakingWithdrawIterator struct {
	Event *StakingWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingWithdraw represents a Withdraw event raised by the Staking contract.
type StakingWithdraw struct {
	From        common.Address
	To          common.Address
	NodeRunner  bool
	TokenAmount *big.Int
	DbAmount    *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0xe89c586bd81ee35a18f7eac22a732b56e589a2821497cce12a0208828540a36d.
//
// Solidity: e Withdraw(from indexed address, to indexed address, nodeRunner bool, tokenAmount uint256, dbAmount uint256)
func (_Staking *StakingFilterer) FilterWithdraw(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*StakingWithdrawIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "Withdraw", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &StakingWithdrawIterator{contract: _Staking.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0xe89c586bd81ee35a18f7eac22a732b56e589a2821497cce12a0208828540a36d.
//
// Solidity: e Withdraw(from indexed address, to indexed address, nodeRunner bool, tokenAmount uint256, dbAmount uint256)
func (_Staking *StakingFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *StakingWithdraw, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "Withdraw", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingWithdraw)
				if err := _Staking.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
